#.github/workflows/terraform
name: Terraform Deployment and ecr

on:
  push:
    branches:
      - laravel 
  workflow_dispatch:
permissions:
      id-token: write
      contents: read
      pull-requests: write

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.SESSION_TOKEN }}
  AWS_REGION: "us-east-1"
  backendS3Bucket: "8586-terraform-state"
  backendS3AccountId: ${{ secrets.ACCOUNT_ID }}
  backendS3StateFile: "friday_task_papila.tfstate"
  backendS3region: us-east-1
  ECR_REPOSITORY_URI: 426857564226.dkr.ecr.us-east-1.amazonaws.com/ghising-ecr
  IMAGE_TAG: latest

jobs:
  terraform:
    runs-on: ubuntu-latest


    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3 

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ env.ACCESS_KEY }}
          aws-secret-access-key: ${{ env.SECRET_KEY }}
          aws-session-token: ${{ env.SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init -backend-config="bucket=${{ env.backendS3Bucket }}" -backend-config="key=${{ env.backendS3AccountId }}/${{ env.backendS3StateFile }}" -backend-config="region=${{ env.backendS3Region }}"
          
      - name: Terraform plan
        run: |
          cd terraform
          terraform plan -var-file=vars.tfvars 
        
      - name: Apply Terraform Changes
        run: |
          cd terraform
          terraform apply -var-file=vars.tfvars -auto-approve

      - name: Destroy Terraform Resources
        if: github.event_name == 'workflow_dispatch'
        run: |
          cd terraform
          terraform destroy -var-file=vars.tfvars -auto-approve

  docker-install:
    needs: [terraform]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3 

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.ACCESS_KEY }}
          aws-secret-access-key: ${{ env.SECRET_KEY }}
          aws-session-token: ${{ env.SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
        

      - name: Install Docker Dependencies
        run: |
          echo "Running docker.sh script"
          sudo sh ./docker.sh

      
      - name: Verify Docker Installation
        run: |
          echo "Verifying Docker installation"
          docker --version
          docker-compose --version


  build:
    needs: [terraform,docker-install]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.ACCESS_KEY }}
        aws-secret-access-key: ${{ env.SECRET_KEY }}
        aws-session-token: ${{ env.SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build, tag, and push image to Amazon ECR
      run: |
        cd ./laravel
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY_URI }} 
        
        docker build -t  ${{ env.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }} ./laravel

        docker push ${{ env.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}


  configure:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4


      - name: install ansible and dependencies
        run: |
          pip3 install botocore
          pip3 install boto3
          pip3 install ansible


      - name: run ansible playbook
        run: |
          cd ansible
          ansible-playbook -i aws_ec2.yml playbook.yml   
